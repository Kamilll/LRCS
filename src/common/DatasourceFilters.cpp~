/* Copyright (c) 2005, Regents of Massachusetts Institute of Technology, 
 * Brandeis University, Brown University, and University of Massachusetts 
 * Boston. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *   - Redistributions in binary form must reproduce the above copyright 
 *     notice, this list of conditions and the following disclaimer in the 
 *     documentation and/or other materials provided with the distribution.
 *   - Neither the name of Massachusetts Institute of Technology, 
 *     Brandeis University, Brown University, or University of 
 *     Massachusetts Boston nor the names of its contributors may be used 
 *     to endorse or promote products derived from this software without 
 *     specific prior written permission.

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include "DataSource.h"
using namespace std;

byte* DataSource::getRightPage(Decoder* decoder_, bool valSorted_, bool posIndexPrimary_) {
	Log::writeToLog("DataSource", 0, "Called GetRightPage()");
	// if anything has changed we need to reset the indices
	if (posFilterChanged || predChanged) {
		Log::writeToLog("Datasource", 0, "Filter or pred changed, initing cursors");
		am->initCursors();
		posFilterChanged=false;
		predChanged=false;
		predLookup=true;
		posSkippedTo=0;
	}

	if ((posFilter==NULL) && (pred==NULL)) {
		if (predChanged) predChanged=false;
		return getPage(decoder_);
	}
	else if ((posFilter==NULL) && (pred!=NULL)) {
		if (predLookup) {
			predLookup=false;
			Log::writeToLog("DataSource", 0, "GetRightPage() calling getPageOnPred()");
			byte* page=getPageOnPred(decoder_, valSorted_);
			if (page!=NULL) {
				decoder_->setBuffer(page);
			}
			return page;
		}
		else {
			Log::writeToLog("DataSource", 0, "GetRightPage() calling getPage()");
			return (byte*) getNextPageValue();
		}
	}
	else if ((posFilter!=NULL) && (pred==NULL)) {
		Log::writeToLog("DataSource", 0, "GetRightPage() calling getPageOnPos()");		
		return getPageOnPos(decoder_, posIndexPrimary_);
	}	
}

byte* DataSource::getPage(Decoder* decoder_) {
	return (byte*) getNextPageValue();
}


byte* DataSource::getPageOnPred(Decoder* decoder_, bool valSorted_) {
	if (valSorted_) {
		Log::writeToLog("DataSource", 0, "getPageOnPred(), valSorted");		

		byte* value;
		if (pred!=NULL) {
			predChanged=false; 	
		    ValPos* vp = pred->getRHS();
			value=(char*)vp->value;
		}
		byte* page=((byte*) skipToPageValue(value));
		return page;
	}
	else {
		 //return (byte*) getNextPageValue();
	}
}

byte* DataSource::getPageOnPosAndPred(Decoder* decoder_, bool posIndexPrimary_) {
	throw new UnimplementedException("DataSource: to be implemented");	
}
byte* DataSource::getPageOnVal(Decoder* decoder_, bool valSorted_) {
	if (pred!=NULL) {
		
	}
	else {
		
	}
	throw new UnimplementedException("DataSource: to be implemented");
}

byte* DataSource::getPageOnValAndPos(Decoder* decoder_, bool valSorted_) {
	throw new UnimplementedException("DataSource: to be implemented");	
}
