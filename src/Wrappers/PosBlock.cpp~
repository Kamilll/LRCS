#include "PosBlock.h"

PosBlock::PosBlock(ValPos* vp_) : Block()
{
	assert(BLOCK_SIZE >= 4*sizeof(int));
    bfrWithHeader=new byte[BLOCK_SIZE];
	memset(bfrWithHeader, 0, BLOCK_SIZE); 
	posIndex = new int[8*sizeof(int)+1];  
	vp = vp_;
}

PosBlock::~PosBlock()
{
  if(bfrWithHeader)delete[] bfrWithHeader;
  delete[] posIndex;
}

void PosBlock::setBuffer(byte* buffer_) {
	assert(buffer_ != NULL && sizeof(buffer_) == BLOCK_SIZE);
	memcpy(bfrWithHeader, buffer_, BLOCK_SIZE);
	startPos=(unsigned int*)bfrWithHeader;
	endPos=(unsigned int*) (bfrWithHeader+sizeof(int));
	numValues=(unsigned int*) (bfrWithHeader+2*sizeof(int));	

	buffer = bfrWithHeader + (3*sizeof(int));
	bufferPtrAsIntArr = (unsigned int*)(bfrWithHeader + (2*sizeof(int))); 
	currInt = 0;
	currPos = 0;
	currStartPos = 0;
	caculateEndInt();
}
bool PosBlock::hasNext() {
	return (currPos < *endPos);
}

ValPos*  PosBlock::getNext() {
	if (currInt<=endInt) {
		if(currInt == 0)setCurrInt(1);
		if (currIndexInVal) {
			currPos = ((currInt-1)*sizeof(int)*8)+*startPos+posIndex[currIndexInVal];
			currIndexInVal++;

			if (posIndex[currIndexInVal] == 255) {
				currInt++;	
				currIndexInVal=0;
			}
		}
		else {			
			while ((bufferPtrAsIntArr[currInt] == 0) && (currInt < endInt))
				currInt++;	

			if ((currInt == endInt) && ((bufferPtrAsIntArr[currInt] == 0)))
				return NULL;
			else
				setPosIndex(bufferPtrAsIntArr[currInt], posIndex, currIndexInVal);
		
			currPos=((currInt-1)*sizeof(int)*8)+*startPos+posIndex[currIndexInVal];
			currIndexInVal++;
			if (posIndex[currIndexInVal] == 255) {
				currInt++;	
				currIndexInVal=0;
			}
		}
	}
	else{
		currPos = 0;
		currInt = 0;
		return NULL;
	}

	vp->position = currPos;
	return vp;
}

void PosBlock::resetBlock() {
  if (bfrWithHeader)
    memset(bfrWithHeader, 0, BLOCK_SIZE); 
    setCurrInt(0);
}

bool PosBlock::setCurrInt(unsigned int currInt_){
	if(currInt_ > endInt)return false;
	currInt = currInt_;
	currIndexInVal=0;
	return true;
}

bool PosBlock::isOneValue() {
	return false;
}	
bool PosBlock::isValueSorted() {
	return true;	
}
		
bool PosBlock::isPosContiguous() {
	return true;	
}
bool PosBlock::isPosSorted() {
	return true;	
}
bool PosBlock::isBlockValueSorted() {
	return true;
}
bool PosBlock::isBlockPosSorted() {
	return true;
}

void PosBlock::caculateEndInt( ) {
	endInt = (*endPos-*startPos)/(8*sizeof(int))+1;
}

void PosBlock::setPosIndex(int v, int* pidx, int& currIndexInVal) {
  currIndexInVal=0;
  for (int i = (8*sizeof(int))-1; i>=0; i--) {
    if ((1 << i) & v) {
      pidx[currIndexInVal] = ((8*sizeof(int))-1)-i;
      currIndexInVal++;
    }
  }
  pidx[currIndexInVal]=255;
  currIndexInVal=0;
}